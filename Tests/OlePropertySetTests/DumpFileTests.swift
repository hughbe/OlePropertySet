import XCTest
import CompoundFileReader
import DataStream
@testable import OlePropertySet

final class DumpFileTests: XCTestCase {
    static func dump(propertyStream: PropertySetStream) -> String {
        var s = ""
        
        func escape(string: String) -> String {
            var s = ""
            for c in string.unicodeScalars {
                s += c.escaped(asASCII: true)
            }
            
            return "\"\(s)\""
        }

        func dump(value: Any?) -> String {
            guard let value = value else {
                return "nil"
            }
            
            if type(of: value) == UInt64.self {
               return (value as! UInt64).hexString
            } else if type(of: value) == UInt32.self {
                return (value as! UInt32).hexString
            } else if type(of: value) == UInt16.self {
                return (value as! UInt16).hexString
            } else if type(of: value) == UInt8.self {
                return (value as! UInt8).hexString
            } else if type(of: value) == Int64.self {
                return (value as! Int64).hexString
             } else if type(of: value) == Int32.self {
                 return (value as! Int32).hexString
             } else if type(of: value) == Int16.self {
                 return (value as! Int16).hexString
             } else if type(of: value) == Int8.self {
                 return (value as! Int8).hexString
             } else if type(of: value) == String.self {
                return escape(string: (value as! String))
             } else if type(of: value) == Date.self {
                return (value as! Date).description
             } else if type(of: value) == Bool.self {
                return (value as! Bool) ? "true" : "false"
             } else if type(of: value) == [String].self {
                return "[\((value as! [String]).map(escape).joined(separator: ", "))]"
             } else if type(of: value) == [Any?].self {
                return "[\((value as! [Any?]).map(dump(value:)).joined(separator: ", "))]"
             } else if type(of: value) == [UInt64].self {
                return (value as! [UInt64]).hexString
             } else if type(of: value) == [UInt32].self {
                return (value as! [UInt32]).hexString
             } else if type(of: value) == [UInt16].self {
                return (value as! [UInt16]).hexString
             } else if type(of: value) == [UInt8].self {
                return (value as! [UInt8]).hexString
             } else if type(of: value) == [Int64].self {
                return (value as! [Int64]).hexString
             } else if type(of: value) == [Int32].self {
                return (value as! [Int32]).hexString
             } else if type(of: value) == [Int16].self {
                return (value as! [Int16]).hexString
             } else if type(of: value) == [Int8].self {
                return (value as! [Int8]).hexString
             } else if type(of: value) == Double.self {
                return (value as! Double).description
             } else if type(of: value) == Float.self {
                return (value as! Float).description
             } else if type(of: value) == ClipboardData.self {
                let clipboardData = (value as! ClipboardData)
                return "ClipboardData(format: \(clipboardData.format.hexString), data: \(clipboardData.data.hexString))"
             } else if type(of: value) == IndirectPropertyName.self {
                let indirectPropertyName = (value as! IndirectPropertyName)
                return "IndirectPropertyName(type: \(indirectPropertyName.type), name: \(escape(string: indirectPropertyName.name))"
             } else if type(of: value) == VersionedStream.self {
                let versionedStream = (value as! VersionedStream)
                return "VersionedStream(guid: \"\(versionedStream.versionGuid)\", streamName: \(escape(string: versionedStream.streamName.name))"
             } else {
                fatalError("NYI: \(type(of: value))")
             }
        }
        
        func dump(propertySet: PropertySet) -> String {
            var s = ""
            
            func keyString(propertyIdentifier: PropertyIdentifier) -> String {
                if let name = propertySet.dictionary?.identifierMapping[propertyIdentifier] {
                    return name
                }
                
                if propertyIdentifier == CODEPAGE_PROPERTY_IDENTIFIER {
                    return "PID_CODEPAGE"
                } else if propertyIdentifier == LOCALE_PROPERTY_IDENTIFIER {
                    return "PID_LOCALE"
                } else if propertyIdentifier == MODIFY_TIME_PROPERTY_IDENTIFIER {
                    return "PID_MODIFY_TIME"
                } else if propertyIdentifier == SECURITY_PROPERTY_IDENTIFIER {
                    return "PID_SECURITY"
                } else if propertyIdentifier == BEHAVIOR_PROPERTY_IDENTIFIER {
                    return "PID_LOCALE"
                }
                
                return propertyIdentifier.hexString
            }
            
            let sorted = propertySet.properties.sorted { $0.key < $1.key }
            for (key, value) in sorted {
                s += "\(keyString(propertyIdentifier: key)): \(dump(value: value))\n"
            }
            
            return s
        }
        
        s += "Property Set 0: \(propertyStream.fmtid0)\n"
        s += dump(propertySet: propertyStream.propertySet0)
        
        if let propertySet1 = propertyStream.propertySet1 {
            s += "\n"
            s += "Property Set 1: \(propertyStream.fmtid1!)\n"
            s += dump(propertySet: propertySet1)
        }

        return s
    }
    
    func testDump() throws {
        for (name, fileExtension, storage) in [
            ("hughbe/sample", "doc", "\u{0005}SummaryInformation"),
            ("hughbe/sample", "doc", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/_Test", "ppt", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/_Test", "ppt", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/2_MB-W", "ppt", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/2_MB-W", "ppt", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/english.presets", "doc", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/english.presets", "doc", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/mediationform", "doc", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/mediationform", "doc", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/poWEr.prelim", "doc", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/poWEr.prelim", "doc", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/report_name_fix", "xls", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/report_name_fix", "xls", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/report", "xls", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/report", "xls", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/reportREAD", "xls", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/reportREAD", "xls", "\u{0005}DocumentSummaryInformation"),
            ("ironfede/openmcdf/wstr_presets", "doc", "\u{0005}SummaryInformation"),
            ("ironfede/openmcdf/wstr_presets", "doc", "\u{0005}DocumentSummaryInformation"),
            ("decalage2/olefile/test-ole-file", "doc", "\u{0005}SummaryInformation"),
            ("decalage2/olefile/test-ole-file", "doc", "\u{0005}DocumentSummaryInformation"),
            ("aquasync/ruby-ole/test_word_6", "doc", "\u{0005}SummaryInformation"),
            ("aquasync/ruby-ole/test_word_95", "doc", "\u{0005}SummaryInformation"),
            ("aquasync/ruby-ole/test_word_97", "doc", "\u{0005}SummaryInformation"),
        ] {
            let data = try getData(name: name, fileExtension: fileExtension)
            let file = try CompoundFile(data: data)
            var rootStorage = file.rootStorage
            var dataStream = rootStorage.children[storage]!.dataStream
            let summaryInformation = try PropertySetStream(dataStream: &dataStream)
            print(DumpFileTests.dump(propertyStream: summaryInformation))
        }
        do {
            let data = Data([
                0xFE, 0xFF, 0x00, 0x00, 0x06, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE0, 0x85, 0x9F, 0xF2,
                0xF9, 0x4F, 0x68, 0x10, 0xAB, 0x91, 0x08, 0x00, 0x2B, 0x27, 0xB3, 0xD9, 0x30, 0x00, 0x00, 0x00,
                0x8C, 0x01, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x00, 0x00, 0xC4, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xD0, 0x00, 0x00, 0x00,
                0x06, 0x00, 0x00, 0x00, 0xDC, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00,
                0x08, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
                0x12, 0x00, 0x00, 0x00, 0x1C, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x3C, 0x01, 0x00, 0x00,
                0x0B, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00,
                0x0D, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x6C, 0x01, 0x00, 0x00,
                0x0F, 0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x7C, 0x01, 0x00, 0x00,
                0x13, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xE4, 0x04, 0x00, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x4A, 0x6F, 0x65, 0x27, 0x73, 0x20, 0x64, 0x6F,
                0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                0x4A, 0x6F, 0x62, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x4A, 0x6F, 0x65, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
                0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
                0x4E, 0x6F, 0x72, 0x6D, 0x61, 0x6C, 0x2E, 0x64, 0x6F, 0x74, 0x6D, 0x00, 0x1E, 0x00, 0x00, 0x00,
                0x0A, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x72, 0x6E, 0x65, 0x6C, 0x69, 0x75, 0x73, 0x00, 0x00, 0x00,
                0x1E, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x36, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00,
                0x18, 0x00, 0x00, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x4F, 0x66,
                0x66, 0x69, 0x63, 0x65, 0x20, 0x57, 0x6F, 0x72, 0x64, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
                0x00, 0x6E, 0xD9, 0xA2, 0x42, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x16, 0xD0, 0xA1,
                0x4E, 0x8E, 0xC6, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x1C, 0xF2, 0xD5, 0x2A, 0xCE, 0xC6, 0x01,
                0x40, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xDC, 0x73, 0xDD, 0x80, 0xC8, 0x01, 0x03, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xE5, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                0x38, 0x4F, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ])
            var dataStream = DataStream(data: data)
            let summaryInformation = try PropertySetStream(dataStream: &dataStream)
            print(DumpFileTests.dump(propertyStream: summaryInformation))
        }
        do {
            let data = Data([
                0xFE, 0xFF, 0x01, 0x00, 0x06, 0x00, 0x02, 0x00, 0x53, 0xFF, 0x4B, 0x99, 0xF9, 0xDD, 0xAD, 0x42,
                0xA5, 0x6A, 0xFF, 0xEA, 0x36, 0x17, 0xAC, 0x16, 0x01, 0x00, 0x00, 0x00, 0x01, 0x18, 0x00, 0x20,
                0xE6, 0x5D, 0xD1, 0x11, 0x8E, 0x38, 0x00, 0xC0, 0x4F, 0xB9, 0x38, 0x6D, 0x30, 0x00, 0x00, 0x00,
                0xDC, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x68, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
                0x06, 0x00, 0x00, 0x00, 0x4C, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
                0x0C, 0x00, 0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00,
                0x92, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xB0, 0x04, 0x00, 0x00,
                0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x08, 0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x44, 0x00, 0x69, 0x00,
                0x73, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00,
                0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
                0x4D, 0x00, 0x79, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6D, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x50, 0x00, 0x72, 0x00,
                0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x28, 0x00, 0x47, 0x00, 0x42, 0x00, 0x50, 0x00, 0x29, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x79, 0x00,
                0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00,
                0x27, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x43, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00,
                0x53, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x74, 0x00, 0x69, 0x00, 0x76, 0x00,
                0x65, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x43, 0x00, 0x41, 0x00,
                0x53, 0x00, 0x45, 0x00, 0x53, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x53, 0x00, 0x49, 0x00, 0x54, 0x00,
                0x49, 0x00, 0x56, 0x00, 0x45, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00,
                0x47, 0x00, 0x72, 0x00, 0x65, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
                0xCA, 0x84, 0x95, 0xF9, 0x23, 0xCA, 0x0B, 0x47, 0x83, 0x94, 0x22, 0x01, 0x77, 0x90, 0x7A, 0xAD,
                0x0C, 0x00, 0x00, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x36, 0x00, 0x00, 0x00,
                0x06, 0x00, 0x00, 0x00, 0x00, 0x50, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00,
                0x0E, 0x00, 0x00, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x31, 0x00, 0x32, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                0x03, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x03, 0xF8, 0x14, 0x17, 0x12, 0x87, 0x45, 0x29, 0x25, 0x11, 0x33, 0x56, 0x79, 0xA2, 0x9C, 0x00,
                0x0C, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x76, 0x99, 0x3B, 0x22, 0x10, 0x9C,
            ])
            var dataStream = DataStream(data: data)
            let summaryInformation = try PropertySetStream(dataStream: &dataStream)
            print(DumpFileTests.dump(propertyStream: summaryInformation))
        }
        for (name, fileExtension) in [
            ("richardlehane/msoleps/DocumentSummaryInformation", "dat"),
            ("richardlehane/msoleps/SummaryInformation", "dat"),
            ("richardlehane/msoleps/SummaryInformation1", "dat"),
        ] {
            let data = try getData(name: name, fileExtension: fileExtension)
            var dataStream = DataStream(data: data)
            let summaryInformation = try PropertySetStream(dataStream: &dataStream)
            print(DumpFileTests.dump(propertyStream: summaryInformation))
        }
    }

    static var allTests = [
        ("testDump", testDump),
    ]
}
