
import XCTest
import DataStream
@testable import OlePropertySet

final class DictionaryTests: XCTestCase {
    func testExample() throws {
        do {
            /// [MS-OLEPS] 3.2.2.1.4 Dictionary
            /// The Dictionary property is an instance of the Dictionary structure defined in section 2.17.
            /// Property identifier: 0x00000000
            /// Property offset: 0x00000030 + 0x00000070 = 0x000000A0 (decimal 160)
            /// The following table shows the binary contents of the structure representing the property.
            let data = Data([
                /* NumEntries */     0x06, 0x00, 0x00, 0x00,
                /* Entry 0 Offset */ 0x04, 0x00, 0x00, 0x00,
                /* Entry 0 Length */ 0x0E, 0x00, 0x00, 0x00,
                /* Entry 0 Name */   0x44, 0x00, 0x69, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x00, 0x00,
                
                /* Entry 1 Offset */ 0x06, 0x00, 0x00, 0x00,
                /* Entry 1 Length */ 0x09, 0x00, 0x00, 0x00,
                /* Entry 1 Name */   0x4D, 0x00, 0x79, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00,
                
                /* Entry 2 Offset */ 0x07, 0x00, 0x00, 0x00,
                /* Entry 2 Length */ 0x0B, 0x00, 0x00, 0x00,
                /* Entry 2 Name */   0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x28, 0x00, 0x47, 0x00, 0x42, 0x00, 0x50, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00,
                
                /* Entry 3 Offset */ 0x0C, 0x00, 0x00, 0x00,
                /* Entry 3 Length */ 0x0A, 0x00, 0x00, 0x00,
                /* Entry 3 Name */   0x4D, 0x00, 0x79, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00,
                
                /* Entry 4 Offset */ 0x27, 0x00, 0x00, 0x00,
                /* Entry 4 Length */ 0x0E, 0x00, 0x00, 0x00,
                /* Entry 4 Name */   0x43, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x53, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x69, 0x00, 0x74, 0x00, 0x69, 0x00, 0x76, 0x00, 0x65, 0x00, 0x00, 0x00,
                
                /* Entry 5 Offset */ 0x92, 0x00, 0x00, 0x00,
                /* Entry 5 Length */ 0x0E, 0x00, 0x00, 0x00,
                /* Entry 5 Name */   0x43, 0x00, 0x41, 0x00, 0x53, 0x00, 0x45, 0x00, 0x53, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x53, 0x00, 0x49, 0x00, 0x54, 0x00, 0x49, 0x00, 0x56, 0x00, 0x45, 0x00, 0x00, 0x00
            ])
            var dataStream = DataStream(data: data)
            let dictionary = try Dictionary(dataStream: &dataStream, codePage: 0x04B0)
            XCTAssertEqual(6, dictionary.identifierMapping.count)
            XCTAssertEqual("CaseSensitive", dictionary.identifierMapping[0x27])
            XCTAssertEqual("DisplayColour", dictionary.identifierMapping[0x04])
            XCTAssertEqual("CASESENSITIVE", dictionary.identifierMapping[0x92])
            XCTAssertEqual("MyStream", dictionary.identifierMapping[0x06])
            XCTAssertEqual("Price(GBP)", dictionary.identifierMapping[0x07])
            XCTAssertEqual("MyStorage", dictionary.identifierMapping[0x0C])
            XCTAssertEqual(0x27, dictionary.nameMapping["CaseSensitive"])
            XCTAssertEqual(0x04, dictionary.nameMapping["DisplayColour"])
            XCTAssertEqual(0x92, dictionary.nameMapping["CASESENSITIVE"])
            XCTAssertEqual(0x06, dictionary.nameMapping["MyStream"])
            XCTAssertEqual(0x07, dictionary.nameMapping["Price(GBP)"])
            XCTAssertEqual(0x0C, dictionary.nameMapping["MyStorage"])
            XCTAssertEqual(0, dataStream.remainingCount)
        }
    }

    static var allTests = [
        ("testExample", testExample),
    ]
}
